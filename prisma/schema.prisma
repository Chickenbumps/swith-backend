// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"

}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  username          String    @unique
  email             String    @unique
  password          String
  bio               String?
  avatar            String?
  followers         User[]    @relation("FollowRelation", references: [id])
  following         User[]    @relation("FollowRelation", references: [id])
  createdAt         String
  updatedAt         String
  rank              String?   @default("Bronze")
  todayTime         Float?    @default(0)
  weekTime          Float?    @default(0)
  monthTime         Float?    @default(0)
  totalTime         Float?    @default(0)
  totalNumberOfTime Float?    @default(0)
  // @onDelete(CASACADE)
  observers         User[]    @relation("UserToUser", references: [id])
  /// @onDelete(CASACADE)
  comments          Comment[]
  exp               Float?    @default(0)
  maxExp            Float?    @default(10)
  groups            Group[]
  /// @onDelete(CASACADE)
  messages          Message[]
  /// @onDelete(CASACADE)
  inviter           Inviter?
  /// @onDelete(CASACADE)
  time              Time[]
  subjects          User[]    @relation("UserToUser", references: [id])
  isObserver        Boolean?  @default(false)
}

model Time {
  id         Int    @id @default(autoincrement())
  timeValue  Float  @default(0)
  timeNumber Int    @default(0)
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  String
  updatedAt  String
  dayName    String
}

// model Observer {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

model Comment {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  payload   String
  createdAt String
  updatedAt String
}

model Message {
  id        Int     @id @default(autoincrement())
  payload   String
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  group     Group   @relation(fields: [groupId], references: [id])
  createdAt String
  updatedAt String
  groupId   Int
  read      Boolean @default(false)
}

model Group {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  members     User[]    @relation(references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  /// @onDelete(CASACADE)
  messages    Message[]
  inviter     Inviter   @relation(fields: [inviterId], references: [id])
  inviterId   Int
}

model Inviter {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  /// @onDelete(CASACADE)
  Group  Group[]
}
